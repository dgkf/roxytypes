[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 roxytypes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Doug Kelkhoff. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelkhoff D (2023). roxytypes: Provides Typed Parameter Tags Integration 'roxygen2'. https://github.com/openpharma/roxytypes, https://openpharma.github.io/roxytypes.","code":"@Manual{,   title = {roxytypes: Provides Typed Parameter Tags for Integration with 'roxygen2'},   author = {Doug Kelkhoff},   year = {2023},   note = {https://github.com/openpharma/roxytypes, https://openpharma.github.io/roxytypes}, }"},{"path":"/index.html","id":"roxytypes","dir":"","previous_headings":"","what":"Provides Typed Parameter Tags for Integration with roxygen2","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"Typed parameter definition roxygen2 tag","code":""},{"path":[]},{"path":"/index.html","id":"convert-your-package","dir":"","previous_headings":"Quick Start","what":"Convert your package","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"already codebase ’d like convert use roxytypes, can use: ’ll prompted preview changes option continue making edits aborting changes. default, look type signatures parenthesized inline code start descriptions. , descriptions written like (`type`) description. ’s case, can specify format. example, types square brackets, specify format like: default, conversions happen existing type found using provided type format. ’d like convert possible tags, pass unmatched = TRUE. However new typed tags partially populated produce documentation notes filled .","code":"roxytypes::convert() roxytypes::convert(format = \"[`{type}`] {description}\")"},{"path":"/index.html","id":"tags-from-scratch","dir":"","previous_headings":"Quick Start","what":"Tags from scratch","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"Use @typed tag define parameters, replacing @param tag. @typed tag expects input form: newline type field meaningful delimiter avoid disambiguate type annotations written descriptions. practice looks something like : Next order business install package declare roxygen2 dependency. DESCRIPTION set , thing left rebuild docs!","code":"#' @typed <var>: <type> #'   <description> #' Example #' #' @typed who: character #'   Who you'd like to say hello to. #' #' @typedreturn: NULL #'   `cat` output returned. #' hello <- function(who = \"World\") {   cat(\"Hello, \", who, \"!\\n\", sep = \"\") } Config/Needs/documentation:     roxytypes Roxygen:     list(markdown = TRUE, packages = \"roxytypes\")"},{"path":"/index.html","id":"configuration","dir":"","previous_headings":"","what":"Configuration","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"roxytypes accepts number configuration fields. defaults, see ?config.","code":""},{"path":"/index.html","id":"formatting","dir":"","previous_headings":"Configuration","what":"Formatting","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"style documentation can configured using Config/roxytypes: DESCRIPTION format string uses glue can expected fields name, type description. parameter name always named argument value, may reused parts description. Altenatively, can provide function accepts parsed roxygen2 tag fields named arguments. advanced formatting, see ?tags ?typed.","code":"Config/roxytypes: list(format = \"(`{type}`): {description}\")"},{"path":"/index.html","id":"roxylint-compatible","dir":"","previous_headings":"","what":"roxylint compatible","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"@typed tags come roxylint linters. benefit linting @typed tags, simply add roxylint::roxylint roclet. DESCRIPTION tip! Roxygen section gets long, can also put content man/roxygen/meta.R can benefit perks editor’s R file handling.","code":"Roxygen:   list(     markdown = TRUE,     packages = c(\"roxylint\", \"roxytypes\"),     roclets = c(\"namespace\", \"rd\", \"roxylint::roxylint\")   )"},{"path":"/reference/associated_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Find an associated block — associated_block","title":"Find an associated block — associated_block","text":"Given file line, discover block tag associated ","code":""},{"path":"/reference/associated_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find an associated block — associated_block","text":"","code":"associated_block(file, line)"},{"path":"/reference/associated_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find an associated block — associated_block","text":"file (character[1]) file path associated tag line (integer[1]) line number file tag found","code":""},{"path":"/reference/associated_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find an associated block — associated_block","text":"(roxygen2::roxy_block() | NULL) roxy_block one associated, NULL .","code":""},{"path":"/reference/build_convert_edits.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a collection of conversion edits — build_convert_edits","title":"Build a collection of conversion edits — build_convert_edits","text":"Build collection conversion edits","code":""},{"path":"/reference/build_convert_edits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a collection of conversion edits — build_convert_edits","text":"","code":"build_convert_edits(format, tags, unmatched = FALSE)"},{"path":"/reference/build_convert_edits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a collection of conversion edits — build_convert_edits","text":"format (character[1]) regular expression, optionally containing named capture groups type description, used restructuring tag roxytypes-equivalent tag. tags (list(roxy_tag)) collection roxygen2::roxy_tag() objects edit. Can include tags plausible conversion, filtered returning edits. unmatched (logical[1]) Whether make edits existing tags can matched provided format. TRUE, existing description migrated verbatim new tag, without type provided. new syntax produce warnings running roxygen2::roxygenize(), can useful tool pinpointing tags need manual fine-tuning conversion.","code":""},{"path":"/reference/build_convert_edits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a collection of conversion edits — build_convert_edits","text":"(data.frame) collection possible tag edits produced tag_edit().","code":""},{"path":[]},{"path":"/reference/build_format_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Build format regular expression — build_format_regex","title":"Build format regular expression — build_format_regex","text":"Allow glue-style formatting using keyworded regular expressions. original glue string (anything expanded glue) treated string literal, whereas contents populated values can regular expressions, allowing user-friendly way construct complicated regular expressions.","code":""},{"path":"/reference/build_format_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build format regular expression — build_format_regex","text":"","code":"build_format_regex(   format,   format_re,   ...,   type = re_backticked(),   description = re_any() )  re_backticked()  re_any()  escape_non_glue_re(x)"},{"path":"/reference/build_format_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build format regular expression — build_format_regex","text":"format (character[1]) glue-style format string. Expanded whisker values used shorthand capture groups, ellipsis arguments can provided additional capture group patterns. format_re (character[1]) Alternatively, provide standard regular expression directly. ... Additional arguments provide keyworded capture groups format type (character[1]) regular expression use match type signature. default, matches within backticks. description (character[1]) regular expression use match parameter description. default, matches string. x (character[1]) string escape.","code":""},{"path":"/reference/build_format_regex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build format regular expression — build_format_regex","text":"bypass glue entirely use standard regular expression, use format_re. provided regular expression must match characters start string end. string also matches using \"dot \" syntax, meaning . expression also match newline characters.","code":""},{"path":"/reference/build_format_regex.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Build format regular expression — build_format_regex","text":"re_backticked(): Match within backticks re_any(): Match escape_non_glue_re(): Escape regular expression special characters addition, avoid escaping {}'s appear used glue keywords. Handles simple cases, handle recusive curly nesting.","code":""},{"path":"/reference/build_format_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build format regular expression — build_format_regex","text":"","code":"re <- roxytypes:::build_format_regex(   \"{as}{any}{bs}\",   as = \"a+\",   bs = \"b+\",   any = \".*?\" )  roxytypes:::regex_capture(re, \"aaaa\\n\\nbb\", perl = TRUE) #>      as     any    bs   #> [1,] \"aaaa\" \"\\n\\n\" \"bb\"  text <- \"@param (`test(\\\")\\\")`)\"  pattern <- sprintf(\"`%s`\", re_backticked())  m <- regexec(pattern, text, perl = TRUE) regmatches(text, m)[[1]] #> [1] \"`test(\\\")\\\")`\" # [1] \"`test(\\\")\\\")`\"  # curlies escaped, as this does not appear to be a glue-style usage roxytypes:::escape_non_glue_re(\".{1,3}\") #> [1] \"\\\\.\\\\{1,3\\\\}\"  # curlies not escaped, as this is a glue-style usage roxytypes:::escape_non_glue_re(\"this is a {test}\") #> [1] \"this is a {test}\""},{"path":"/reference/clear_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear state object — clear_state","title":"Clear state object — clear_state","text":"Clear state object","code":""},{"path":"/reference/clear_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear state object — clear_state","text":"","code":"clear_state()"},{"path":"/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"roxytypes Config — config","title":"roxytypes Config — config","text":"roxytypes exposes configuration options helping fine-tune documentation. stored key-values list either Config/roxytypes field DESCRIPTION file, ./man/roxytypes/meta.R file within package.","code":""},{"path":"/reference/config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxytypes Config — config","text":"","code":"config(path = getwd(), refresh = FALSE, cache = TRUE)"},{"path":"/reference/config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"roxytypes Config — config","text":"(list) named list configured behaviors.","code":""},{"path":"/reference/config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"roxytypes Config — config","text":"available settings listed . fields nested, shown concatenating nested keys using $. format: optional glue-style string, can assume values name, type description. See ?roxytypes::tags details source strings. verbose: TRUE, emit extra diagnostic alerts processing package.","code":""},{"path":"/reference/config_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuration — config_helpers","title":"Configuration — config_helpers","text":"Various functions loading, caching performing configured behaviors using user-supplied configuration file.","code":""},{"path":"/reference/config_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configuration — config_helpers","text":"","code":"config_find_from(path = \".\")  config_from_desc(path = \".\")  config_from_file(path = \".\")"},{"path":"/reference/config_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configuration — config_helpers","text":"path (character[1]) file path use searching config file. Either file path DESCRIPTION root path package, depending context function. x (roxy_tag) internal, intermediate roxygen2 tag object upon evaluate configured behaviors. config (list(format= )) list configuration parameters. e (environment) package environment used running roxygen2.","code":""},{"path":"/reference/config_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configuration — config_helpers","text":"constant used variable name package environment documentation built avoid constantly parsing configurations evaluation tag.","code":""},{"path":"/reference/config_helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Configuration — config_helpers","text":"config_find_from(): Load configuration path config_from_desc(): Load configuration DESCRIPTION file config_from_file(): Load configuration dotfile","code":""},{"path":"/reference/convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert roxygen2 tags to roxytypes tags — convert","title":"Convert roxygen2 tags to roxytypes tags — convert","text":"Convert package codebase applicable roxytypes tags. roxygen2 tags drop-replacements (namely @param @return tags), process descriptions replace tags roxytypes equivalents.","code":""},{"path":"/reference/convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert roxygen2 tags to roxytypes tags — convert","text":"","code":"convert(   path = \".\",   format = config(path, refresh = TRUE, cache = FALSE)$format,   ...,   unmatched = FALSE,   verbose = interactive() )"},{"path":"/reference/convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert roxygen2 tags to roxytypes tags — convert","text":"path (character[1]) file path within package. Defaults current working directory. format (character[1]) glue-style format use parse types descriptions conversion roxytypes tags. Available glue keywords include type description. default, type match string closing backtick description match string. See details information. ... Additional arguments passed build_format_regex(). unmatched (logical[1]) Indicates whether tags fail match still converted roxytypes tags. conversions may convenient aim convert package holistically, help flag undocumented parameter types next time re-build documentation. verbose (logical[1]) Indicates whether command-line interface emitted changes can reviewed interactively.","code":""},{"path":"/reference/convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert roxygen2 tags to roxytypes tags — convert","text":"(logical[1]) TRUE successfully completes, FALSE aborted. Always returns invisibly.","code":""},{"path":"/reference/convert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert roxygen2 tags to roxytypes tags — convert","text":"format string built using build_format_regex(), accepts parameters type description, describe match components parameter definition. combined literal content format produce regular expression split existing definitions. comprehensive control, pass format_re directly, bypassing expression construction altogether.","code":""},{"path":"/reference/convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert roxygen2 tags to roxytypes tags — convert","text":"","code":"if (FALSE) { convert(\"(`{type}`) {description}\") }"},{"path":"/reference/convert_config_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for modifying configuration files — convert_config_helpers","title":"Tools for modifying configuration files — convert_config_helpers","text":"Tools modifying configuration files","code":""},{"path":"/reference/convert_config_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for modifying configuration files — convert_config_helpers","text":"","code":"make_config_edits(path)  guess_dcf_indent(dcf)  update_config_needs(dcf)  update_config_roxygen_meta(path)  update_config_roxygen_desc(dcf)  update_config_roxygen_expr(expr)"},{"path":"/reference/convert_config_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for modifying configuration files — convert_config_helpers","text":"path, root (character[1]) file path within package directory. dcf (data.frame) result read.dcf() package description file. expr (expression) parsed contents R-formatted config entry.","code":""},{"path":"/reference/convert_config_helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Tools for modifying configuration files — convert_config_helpers","text":"make_config_edits(): Make edits various configuration files guess_dcf_indent(): Guess existing dcf indentation update_config_needs(): Update Needs section DESCRIPTION file update_config_roxygen_meta(): Update Roxygen man/roxygen/meta.R file update_config_roxygen_desc(): Update Roxygen DESCRIPTION entry update_config_roxygen_expr(): Update Roxygen config expression","code":""},{"path":"/reference/convert_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion Helpers — convert_helpers","title":"Conversion Helpers — convert_helpers","text":"Various functions supporting conversion standard roxygen tags @typed tags.","code":""},{"path":"/reference/convert_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conversion Helpers — convert_helpers","text":"","code":"convert_continue_prompt()  preview_convert_edits(edits, n = 1)  preview_convert_edit(edit)  format_diff_chr(d, offset)  diff_lines(d)"},{"path":"/reference/convert_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conversion Helpers — convert_helpers","text":"n number tags preview edit, edits (data.frame) produced convert_edit_df. Contains edit source file, starting line number, number original lines modified, new content insert whether format matched edit. singular, data.frame single row. d (cli::diff_chr() result) diff original new tag contents. offset (integer[1]) line offset start diff. format (string) regular expression use match existing param definitions. unmatched (logical[1]) Indicates whether @param tags match expected pattern converted anyways. cases, entire description migrated new @typed description new @typed tag's type left blank. tags list roxygen2::roxy_tag()s preview","code":""},{"path":"/reference/convert_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conversion Helpers — convert_helpers","text":"NULL","code":""},{"path":"/reference/convert_helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Conversion Helpers — convert_helpers","text":"convert_continue_prompt(): Show dialog ask user like proceed preview_convert_edits(): Preview diffs applying conversion rules preview_convert_edit(): Preview diffs applying conversion rules format_diff_chr(): Format diff object cli display diff_lines(): Build data.frame old new line numbers diff","code":""},{"path":"/reference/convert_match_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Match a conversion format and structure results — convert_match_format","title":"Match a conversion format and structure results — convert_match_format","text":"Match conversion format structure results","code":""},{"path":"/reference/convert_match_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match a conversion format and structure results — convert_match_format","text":"","code":"convert_match_format(x, format)"},{"path":"/reference/convert_match_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match a conversion format and structure results — convert_match_format","text":"x (character[1]) Content match. format (character[1]) regular expression, optionally containing named capture groups type description, used restructuring tag roxytypes-equivalent tag.","code":""},{"path":"/reference/convert_match_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match a conversion format and structure results — convert_match_format","text":"(: list) named list type, description matched fields. type description represent result captured groups. capture groups used, raw string used description. matched logical[1] indicating whether provided format matched provided input.","code":""},{"path":[]},{"path":"/reference/convert_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a roxygen2 tag to roxytypes equivalent — convert_tag","title":"Convert a roxygen2 tag to roxytypes equivalent — convert_tag","text":"Convert roxygen2 tag roxytypes equivalent","code":""},{"path":"/reference/convert_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a roxygen2 tag to roxytypes equivalent — convert_tag","text":"","code":"convert_tag(tag, format, ...)  # S3 method for default convert_tag(tag, format, ...)  # S3 method for return convert_tag(tag, format, ...)  # S3 method for param convert_tag(tag, format, ...)"},{"path":"/reference/convert_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a roxygen2 tag to roxytypes equivalent — convert_tag","text":"tag (roxygen2::roxy_tag()) roxygen2 tag convert. format (character[1]) regular expression, optionally containing named capture groups type description, used restructuring tag roxytypes-equivalent tag. ... Additional arguments unused.","code":""},{"path":"/reference/convert_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a roxygen2 tag to roxytypes equivalent — convert_tag","text":"(``NULL [tag_edit()]) tag can converted, tag_edit() returned, otherwise `NULL`.","code":""},{"path":"/reference/convert_tag.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Convert a roxygen2 tag to roxytypes equivalent — convert_tag","text":"convert_tag(default): Default handler tags can converted. convert_tag(return): Convert @return tags, parsing type description existing description. convert_tag(param): Convert @param tags, parsing type description existing description.","code":""},{"path":[]},{"path":"/reference/default_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Default formatter for @typed — default_format","title":"Default formatter for @typed — default_format","text":"Adds special cases type uses roxygen2 syntax","code":""},{"path":"/reference/default_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default formatter for @typed — default_format","text":"","code":"default_format(x, name, type, description, ...)"},{"path":"/reference/default_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default formatter for @typed — default_format","text":"x (roxygen2::roxy_tag()) tag format. name, type, description (character(1)) Fields parsed @typed tag. ... Additional arguments unused.","code":""},{"path":"/reference/default_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default formatter for @typed — default_format","text":"formatted character value.","code":""},{"path":"/reference/find_package_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Find package root directory — find_package_root","title":"Find package root directory — find_package_root","text":"Traces parent directories find pacakge root","code":""},{"path":"/reference/find_package_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find package root directory — find_package_root","text":"","code":"find_package_root(path = \".\")"},{"path":"/reference/find_package_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find package root directory — find_package_root","text":"path (character[1]) file path within package.","code":""},{"path":"/reference/find_package_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find package root directory — find_package_root","text":"(character[1]) file path package root directory.","code":""},{"path":"/reference/if-not-null-else.html","id":null,"dir":"Reference","previous_headings":"","what":"If-not-null-else — if-not-null-else","title":"If-not-null-else — if-not-null-else","text":"--null-else","code":""},{"path":"/reference/if-not-null-else.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If-not-null-else — if-not-null-else","text":"","code":"lhs %||% rhs"},{"path":"/reference/make_convert_edits.html","id":null,"dir":"Reference","previous_headings":"","what":"Make tag edits — make_convert_edits","title":"Make tag edits — make_convert_edits","text":"Make tag edits","code":""},{"path":"/reference/make_convert_edits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make tag edits — make_convert_edits","text":"","code":"make_convert_edits(edits)"},{"path":"/reference/make_convert_edits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make tag edits — make_convert_edits","text":"edits (data.frame) collection edits (one edit per row), produced tag_edit().","code":""},{"path":"/reference/make_convert_edits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make tag edits — make_convert_edits","text":"(integer[1]) number edits made.","code":""},{"path":[]},{"path":"/reference/read_dcf_asis.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper to reliably read DCF files — read_dcf_asis","title":"A helper to reliably read DCF files — read_dcf_asis","text":"helper reliably read DCF files","code":""},{"path":"/reference/read_dcf_asis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper to reliably read DCF files — read_dcf_asis","text":"","code":"read_dcf_asis(path)"},{"path":"/reference/read_dcf_asis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper to reliably read DCF files — read_dcf_asis","text":"path (character[1]) file path DESCRIPTION file.","code":""},{"path":"/reference/read_dcf_asis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper to reliably read DCF files — read_dcf_asis","text":"(data.frame) result read.dcf().","code":""},{"path":"/reference/regex-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"A half-baked extract method — regex-helpers","title":"A half-baked extract method — regex-helpers","text":"half-baked extract method","code":""},{"path":"/reference/regex-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A half-baked extract method — regex-helpers","text":"","code":"re_extract(pattern, replace, x)  extract_backticked(x)  extract_quoted(x)  is_backticked(x)  is_bracketed(x)"},{"path":"/reference/regex-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A half-baked extract method — regex-helpers","text":"pattern character string containing regular expression     (character string fixed = TRUE) matched     given character vector.  Coerced     .character character string possible.      character vector length 2 supplied, first element     used warning.  Missing values allowed except     regexpr, gregexpr regexec.","code":""},{"path":"/reference/regex-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A half-baked extract method — regex-helpers","text":"(character[1]) substituted string replacement made, NULL otherwise.","code":""},{"path":"/reference/regex-helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"A half-baked extract method — regex-helpers","text":"extract_backticked(): Extract contents backtick-enclosed string extract_quoted(): Extract contents quoted (single double) string is_backticked(): Extract contents backtick-enclosed string is_bracketed(): Test whether contents enclosed brackets","code":""},{"path":"/reference/regex-helpers.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A half-baked extract method — regex-helpers","text":"implementation considered half-baked check whether replacement made results string. case interpreted match.","code":""},{"path":"/reference/regex_capture.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture regex groups — regex_capture","title":"Capture regex groups — regex_capture","text":"Captures regex groups returns named matrix groups one column per capture group one row per element x.","code":""},{"path":"/reference/regex_capture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture regex groups — regex_capture","text":"","code":"regex_capture(pattern, x, ...)"},{"path":"/reference/regex_capture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture regex groups — regex_capture","text":"pattern (character[1]) regex pattern use capturing groups. x (character) vector strings match . ... Additional arguments passed regexpr().","code":""},{"path":"/reference/roxy_tag_parse.roxy_tag_typed.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","title":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","text":"Parse @typed tag return parsed components value","code":""},{"path":"/reference/roxy_tag_parse.roxy_tag_typed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","text":"","code":"# S3 method for roxy_tag_typed roxy_tag_parse(x)"},{"path":"/reference/roxy_tag_parse.roxy_tag_typed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","text":"x tag","code":""},{"path":"/reference/roxy_tag_parse.roxy_tag_typedreturn.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygen2 @typedreturn tag parsing — roxy_tag_parse.roxy_tag_typedreturn","title":"roxygen2 @typedreturn tag parsing — roxy_tag_parse.roxy_tag_typedreturn","text":"Parse @typedreturn tag return parsed components value","code":""},{"path":"/reference/roxy_tag_parse.roxy_tag_typedreturn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygen2 @typedreturn tag parsing — roxy_tag_parse.roxy_tag_typedreturn","text":"","code":"# S3 method for roxy_tag_typedreturn roxy_tag_parse(x)"},{"path":"/reference/roxy_tag_parse.roxy_tag_typedreturn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roxygen2 @typedreturn tag parsing — roxy_tag_parse.roxy_tag_typedreturn","text":"x tag","code":""},{"path":"/reference/roxy_tag_rd.roxy_tag_typed.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","title":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","text":"Push typed fields @param section","code":""},{"path":"/reference/roxy_tag_rd.roxy_tag_typed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","text":"","code":"# S3 method for roxy_tag_typed roxy_tag_rd(x, base_path, env)"},{"path":"/reference/roxy_tag_rd.roxy_tag_typed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","text":"x tag base_path Path package root directory. env Environment evaluate code (needed)","code":""},{"path":"/reference/roxy_tag_rd.roxy_tag_typedreturn.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygen2 @typedreturn tag rd section population — roxy_tag_rd.roxy_tag_typedreturn","title":"roxygen2 @typedreturn tag rd section population — roxy_tag_rd.roxy_tag_typedreturn","text":"Push typed fields @param section","code":""},{"path":"/reference/roxy_tag_rd.roxy_tag_typedreturn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygen2 @typedreturn tag rd section population — roxy_tag_rd.roxy_tag_typedreturn","text":"","code":"# S3 method for roxy_tag_typedreturn roxy_tag_rd(x, base_path, env)"},{"path":"/reference/roxy_tag_rd.roxy_tag_typedreturn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roxygen2 @typedreturn tag rd section population — roxy_tag_rd.roxy_tag_typedreturn","text":"x tag base_path Path package root directory. env Environment evaluate code (needed)","code":""},{"path":"/reference/roxygen_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch roxygen2 blocks — roxygen_blocks","title":"Fetch roxygen2 blocks — roxygen_blocks","text":"Avoid recomputing roxygen2s parsing saving blocks first tag hit.","code":""},{"path":"/reference/roxygen_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch roxygen2 blocks — roxygen_blocks","text":"","code":"roxygen_blocks(path = getwd(), refresh = FALSE, cache = TRUE)"},{"path":"/reference/split_and_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Split and trim a string — split_and_trim","title":"Split and trim a string — split_and_trim","text":"Split trim string","code":""},{"path":"/reference/split_and_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split and trim a string — split_and_trim","text":"","code":"split_and_trim(x)"},{"path":"/reference/split_and_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split and trim a string — split_and_trim","text":"x (character[1]) string split lines trim.","code":""},{"path":"/reference/split_and_trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split and trim a string — split_and_trim","text":"(x: character) character vector trimed lines.","code":""},{"path":"/reference/tag_edit.html","id":null,"dir":"Reference","previous_headings":"","what":"Built a conversion edit — tag_edit","title":"Built a conversion edit — tag_edit","text":"Built conversion edit","code":""},{"path":"/reference/tag_edit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built a conversion edit — tag_edit","text":"","code":"tag_edit(tag, new, matched)"},{"path":"/reference/tag_edit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built a conversion edit — tag_edit","text":"tag (roxygen2::roxy_tag()) roxygen2 tag convert. new (character) new content used replace tag. matched (logical[1]) Whether content generated based match specified format.","code":""},{"path":"/reference/tag_edit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built a conversion edit — tag_edit","text":"(data.frame) single-observation dataset representing information tag edit. data.frame row includes variables: file: (character[1]) source file tag. line: (integer[1]) first line tag. n: (integer[1]) number lines tag spans. matched: (logical[1]) Whether tag matched specified format. new: (list[1](character)) new contents replace tag.","code":""},{"path":[]},{"path":"/reference/tags.html","id":null,"dir":"Reference","previous_headings":"","what":"roxytypes tags — tags","title":"roxytypes tags — tags","text":"@typed tag introduces syntax defining parameter types roxygen2 tag.","code":""},{"path":"/reference/tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxytypes tags — tags","text":"","code":"#' @typed <var>: <type> #'   <description>"},{"path":"/reference/tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"roxytypes tags — tags","text":"aware syntactic requirements: : delimiter variable name type. \\n type separate description.","code":""},{"path":"/reference/tags.html","id":"default-type-parsing-syntax","dir":"Reference","previous_headings":"","what":"Default type Parsing Syntax","title":"roxytypes tags — tags","text":"type portion @typed tag syntax handle bit syntax special cases. [type]: Types wrapped brackets, example [roxygen2::roxy_tags()] left -, without wrapping string backticks display inline code preserve native roxygen2 reference link.   `type`: Types wrapped backticks kept -. Additional backticks inserted.   \"type\" 'type': Types wrapped quotes (either single double), provided literal values, removing surrounding quotation marks.","code":"#' @typed arg: [package::function()] #'   long form description. #' @typed arg: `class` #'   long form description. #' @typed arg: \"`class_a` or `class_b`\" #'   depending on the class of the object provided, either an `\"A\"` #'   or a `\"B\"`."},{"path":"/reference/tags.html","id":"custom-type-parsing-function","dir":"Reference","previous_headings":"","what":"Custom type Parsing Function","title":"roxytypes tags — tags","text":"defaults meant cover use cases sufficient elaborate development practices. need go beyond default behaviors, can also provide parsing function, accepting parsed roxygen tag well raw contents. function accepts roxygen2::roxy_tag() produced parsing tag, whose $val contains fields name, type description. convenience, $val contents unpacked arguments, though structure tag liable change. implement typescript-style class union syntax,   produce parameter definition   might define following DESCRIPTION (man/roxytypes/meta.R).","code":"#' @typed arg: class_a | class_b | class_c #'   depending on the class of the object provided, either an `\"A\"` #'   or a `\"B\"`. (`class_a`, `class_c` or `class_b`) depending on the class of the object provided, either an `\"A\"`, `\"B\"` or a `\"C\"`. Config/roxytypes: list(   format = function(tag, ..., name, type, description) {     types <- paste0(\"`\", trimws(strsplit(type, \"|\", fixed = TRUE)[[1]]), \"`\")     types <- glue::glue_collapse(types, sep = \", \", last = \" or \")     paste0(\"(\", types, \") \", description)   } )"},{"path":"/reference/try_parse_typed.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a raw @typed tag — try_parse_typed","title":"Parse a raw @typed tag — try_parse_typed","text":"Parse raw @typed tag","code":""},{"path":"/reference/try_parse_typed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a raw @typed tag — try_parse_typed","text":"","code":"try_parse_typed(raw)"},{"path":"/reference/try_parse_typed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a raw @typed tag — try_parse_typed","text":"raw (character[1]) raw string try parse typed parameter definitions.","code":""},{"path":"/reference/try_parse_typedreturn.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a raw @typedreturn tag — try_parse_typedreturn","title":"Parse a raw @typedreturn tag — try_parse_typedreturn","text":"Parse raw @typedreturn tag","code":""},{"path":"/reference/try_parse_typedreturn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a raw @typedreturn tag — try_parse_typedreturn","text":"","code":"try_parse_typedreturn(raw)"},{"path":"/reference/try_parse_typedreturn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a raw @typedreturn tag — try_parse_typedreturn","text":"raw (character[1]) raw string try parse typed parameter definitions.","code":""},{"path":"/reference/typedreturn.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygen2 @typedreturn tag — typedreturn","title":"roxygen2 @typedreturn tag — typedreturn","text":"@typedreturn tag introduces syntax defining return types roxygen2 tag.","code":""},{"path":"/reference/typedreturn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygen2 @typedreturn tag — typedreturn","text":"","code":"#' @typedreturn <type> #'   <description>"},{"path":"/reference/typedreturn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"roxygen2 @typedreturn tag — typedreturn","text":"couple important syntactic features: : delimiter variable name type. \\n type separate description.","code":""},{"path":"/reference/vapply_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"vapply helpers — vapply_helpers","title":"vapply helpers — vapply_helpers","text":"vapply helpers","code":""},{"path":"/reference/vapply_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vapply helpers — vapply_helpers","text":"","code":"vlapply(..., FUN.VALUE = logical(1L))  vcapply(..., FUN.VALUE = character(1L))"},{"path":"/reference/vapply_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vapply helpers — vapply_helpers","text":"... Passed vapply(). FUN.VALUE prototype signature use vapply().","code":""},{"path":"/reference/vapply_helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"vapply helpers — vapply_helpers","text":"vlapply(): Logical vapply vcapply(): Character vapply","code":""},{"path":"/reference/with_roxy_field_subclass.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper to apply field names to all roxy_tag val fields — with_roxy_field_subclass","title":"A helper to apply field names to all roxy_tag val fields — with_roxy_field_subclass","text":"helper apply field names roxy_tag val fields","code":""},{"path":"/reference/with_roxy_field_subclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper to apply field names to all roxy_tag val fields — with_roxy_field_subclass","text":"","code":"with_roxy_field_subclass(x)"},{"path":"/reference/with_roxy_field_subclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper to apply field names to all roxy_tag val fields — with_roxy_field_subclass","text":"x (list) named list tag val contents","code":""},{"path":"/reference/with_roxy_field_subclass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper to apply field names to all roxy_tag val fields — with_roxy_field_subclass","text":"(: list) nearly identical list, elements additional subclasses based field names.","code":""},{"path":"/news/index.html","id":"roxytypes-000dev","dir":"Changelog","previous_headings":"","what":"roxytypes 0.0.0.dev","title":"roxytypes 0.0.0.dev","text":"Automatically apply default formatting based field types. type fields, perform default formatting (see roxytypes:::.character.roxy_tag_field_type). use another formatting style config, use \"{unclass(type)}\" (@dgkf #13) Improved stability custom formatting syntax, improved documentation user-provided custom formatting functions. (@dgkf #11) Argument order convert() rearranged path first argument. convert() attempt discover format config paackage path. (@dgkf #10)","code":""}]
