[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 roxytypes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Doug Kelkhoff. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelkhoff D (2023). roxytypes: Provides Typed Parameter Tags Integration 'roxygen2'. R package version 0.0.0.9000.","code":"@Manual{,   title = {roxytypes: Provides Typed Parameter Tags for Integration with 'roxygen2'},   author = {Doug Kelkhoff},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"roxytypes","dir":"","previous_headings":"","what":"Provides Typed Parameter Tags for Integration with roxygen2","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"Typed parameter definition roxygen2 tag","code":""},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"Use @typed tag define parameters, replacing @param tag. @typed tag expects input form: newline type field meaningful delimiter avoid disambiguate type annotations written descriptions. practice looks something like : Next order business install package declare roxygen2 dependency. DESCRIPTION set , thing left rebuild docs!","code":"#' @typed <var>: <type> #'   <description> #' Example #' #' @typed who: character #'   Who you'd like to say hello to. #' hello <- function(who = \"World\") {   cat(\"Hello, \", who, \"!\\n\", sep = \"\") } Config/Needs/documentation:     roxytypes Roxygen:     list(markdown = TRUE, packages = \"roxytypes\")"},{"path":"/index.html","id":"configuring-formatting","dir":"","previous_headings":"","what":"Configuring Formatting","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"style documentation can configured using Config/roxytypes: DESCRIPTION format string uses glue can expected fields name, type description. parameter name always named argument value, may reused parts description.","code":"Config/roxytypes: list(format = \"(`{type}`): {description}\")"},{"path":"/index.html","id":"applying-style-checks","dir":"","previous_headings":"","what":"Applying Style Checks","title":"Provides Typed Parameter Tags for Integration with roxygen2","text":"’d like enforce style guide parameters, can set checks part config. can included Config/roxytypes, checking code probably cumbersome author format. Instead, can use man/roxytypes/meta.R accepts format, allows comfortable development. man/roxytypes/meta.R Warnings emitted checks function raised roxygen2 documentation re-built include source information help find offending tags. example, checks emit warnings look something like :","code":"list(   format = \"(`{type}`): {description}\",   checks = function(name, type, description) {     if (!endsWith(description, \".\"))       warning(\"Parameter descriptions must end with a period\")      if (!grepl(\"^[[:upper:]`]\", description))       warning(\"Parameter descriptions should be 'Sentence case'\")   } ) Warning: [config.R:17] @typed Parameter descriptions should be 'Sentence case'"},{"path":"/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuration — config","title":"Configuration — config","text":"Various functions loading, caching performing configured behaviors using user-supplied configuration file.","code":""},{"path":"/reference/config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configuration — config","text":"","code":".state  config_perform_checks(config, x)  config_load()  config_find_from(path)  config_from_desc(path)  config_from_file(path)"},{"path":"/reference/config.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Configuration — config","text":"object class environment length 0.","code":""},{"path":"/reference/config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configuration — config","text":"config [`list(format= , checks=)`] list configuration parameters. x [`roxy_tag`] internal, intermediate `roxygen2` tag object upon evaluate configured behaviors. path [`character[1]`] file path use searching config file. Either file path `DESCRIPTION` root path package, depending context function. e [`environment`] package environment used running `roxygen2`.","code":""},{"path":"/reference/config.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Configuration — config","text":"config_perform_checks(): Perform checks provided config file config_load(): Load contents config environment config_find_from(): Load configuration path config_from_desc(): Load configuration DESCRIPTION file config_from_file(): Load configuration dotfile","code":""},{"path":"/reference/if-not-null-else.html","id":null,"dir":"Reference","previous_headings":"","what":"If-not-null-else — if-not-null-else","title":"If-not-null-else — if-not-null-else","text":"--null-else","code":""},{"path":"/reference/if-not-null-else.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If-not-null-else — if-not-null-else","text":"","code":"lhs %||% rhs"},{"path":"/reference/regex_capture.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture regex groups — regex_capture","title":"Capture regex groups — regex_capture","text":"Captures regex groups returns named matrix groups one column per capture group one row per element x.","code":""},{"path":"/reference/regex_capture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture regex groups — regex_capture","text":"","code":"regex_capture(pattern, x, ...)"},{"path":"/reference/regex_capture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture regex groups — regex_capture","text":"pattern [`character[1]`] regex pattern use capturing groups. x [`character`] vector strings match . ... Additional arguments passed regexpr().","code":""},{"path":"/reference/roxy_tag_parse.roxy_tag_typed.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","title":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","text":"Parse @typed tag return parsed components value","code":""},{"path":"/reference/roxy_tag_parse.roxy_tag_typed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","text":"","code":"# S3 method for roxy_tag_typed roxy_tag_parse(x)"},{"path":"/reference/roxy_tag_parse.roxy_tag_typed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roxygen2 @typed tag parsing — roxy_tag_parse.roxy_tag_typed","text":"x tag","code":""},{"path":"/reference/roxy_tag_rd.roxy_tag_typed.html","id":null,"dir":"Reference","previous_headings":"","what":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","title":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","text":"Push typed fields @param section","code":""},{"path":"/reference/roxy_tag_rd.roxy_tag_typed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","text":"","code":"# S3 method for roxy_tag_typed roxy_tag_rd(x, base_path, env)"},{"path":"/reference/roxy_tag_rd.roxy_tag_typed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"roxygen2 @typed tag rd section population — roxy_tag_rd.roxy_tag_typed","text":"x tag base_path Path package root directory. env Environment evaluate code (needed)","code":""},{"path":"/reference/try_parse_typed.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a raw @typed tag — try_parse_typed","title":"Parse a raw @typed tag — try_parse_typed","text":"Parse raw @typed tag","code":""},{"path":"/reference/try_parse_typed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a raw @typed tag — try_parse_typed","text":"","code":"try_parse_typed(raw)"},{"path":"/reference/try_parse_typed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a raw @typed tag — try_parse_typed","text":"raw [`character[1]`] raw string try parse typed parameter definitions.","code":""}]
